# Create Jenkins EC2 instance. 
resource "aws_instance" "Jenkins" {
  ami                    = var.ami-id
  instance_type          = var.instance-type
  key_name               = "j-key"
  vpc_security_group_ids = ["sg-09ee96be54576478d"]   #jenkins sg
  subnet_id              = "subnet-0a76c757ac8152b85" #jenkins subnet

  tags = {
    Name = "Jenkins Server"
  }
}

# Create bastion server so I can SSH in and add public keys of adama and daood to grant them ssh access to other servers in VPC. 
resource "aws_instance" "Bastion" {
  ami                    = var.ami-id
  instance_type          = var.instance-type
  key_name               = "bastion"
  vpc_security_group_ids = ["sg-0a772d6bcc4f5d846"]   #bastion sg
  subnet_id              = "subnet-0bff1f33f1b62dfe4" #public subnet 

  tags = {
    Name = "Bastion Server"
  }
}

# Create Test EC2 instance.
resource "aws_instance" "Test" {
  ami                    = var.ami-id
  instance_type          = var.instance-type
  availability_zone      = "eu-west-2a"
  key_name               = "test"
  vpc_security_group_ids = ["sg-03ac5ab50375df549"]   #test sg
  subnet_id              = "subnet-021844b1684c653df" #test subnet

  tags = {
    Name = "Test Server"
  }
}

# Create Prod RDS instance
resource "aws_db_instance" "prod" {
  allocated_storage      = 20
  storage_type           = "gp2"
  engine                 = "mysql"
  engine_version         = "5.7"
  instance_class         = "db.t2.micro"
  name                   = "app_db"
  username               = var.db-username
  password               = var.db-password
  skip_final_snapshot    = true
  vpc_security_group_ids = ["sg-08c5ccd86a646c7cc"] # DB security group
  db_subnet_group_name   = "db-subnet-group1"
  identifier             = "prod-db"
}

# Create Test RDS instance
resource "aws_db_instance" "test" {
  allocated_storage      = 20
  storage_type           = "gp2"
  engine                 = "mysql"
  engine_version = "5.7"
  instance_class = "db.t2.micro"
  name = "test_db"
  username = var.db-username
  password = var.db-password
  skip_final_snapshot = true
  vpc_security_group_ids = [
    "sg-08c5ccd86a646c7cc"]
  # DB security group
  db_subnet_group_name = "db-subnet-group1"
  identifier = "test-db"
}


# Export Terraform variable values to an Ansible var_file
resource "local_file" "tf_ansible_vars" {
  content = <<-DOC
// Ansible vars_file containing variable values from Terraform.
// Generated by Terraform mgmt configuration.
// hosts public dns - for building project
env.jenkins_user="ubuntu@${aws_instance.Jenkins.public_dns}"
env.testvm_user="ubuntu@${aws_instance.Test.public_dns}"
env.bastion="ubuntu@${aws_instance.Bastion.public_dns}"
// host key generated for ssh into vms
env.EC2_private_key="${aws_instance.Jenkins.key_name}"
// project variables to pass for databse
env.TEST_DATABASE_URI="mysql+pymysql://${aws_db_instance.test.username}:${aws_db_instance.test.password}@${aws_db_instance.test.endpoint}/testdb"
env.DATABASE_URI="mysql+pymysql://${aws_db_instance.prod.username}:${aws_db_instance.prod.password}@${aws_db_instance.prod.endpoint}/users"
env.SECRET_KEY="${aws_db_instance.test.password}"
env.MYSQL_ROOT_PASSWORD="${aws_db_instance.test.password}"
env.DB_PASSWORD="${aws_db_instance.test.password}"
env.testvm_connection="mysql -h ${aws_db_instance.test.endpoint} -P 3306 -u admin -p${aws_db_instance.test.password}"

    DOC
  filename = "../ansible/.envvars/tf_ansible.groovy"
}